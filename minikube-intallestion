#!/bin/bash
echo << EOF
"=========================================================="
"||     Set up Docker's Apt repository ...............   ||"
"=========================================================="
EOF
# Setup Docker's Apt repository
# Add Docker's official GPG key:
 sudo apt-get update -y
 sudo apt-get install ca-certificates curl gnupg -y
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

# Add the repository to Apt sources:
echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update -y

echo << EOF
"=========================================================="
"||   Docker's Apt repository is completed...........    ||"
"=========================================================="
EOF

echo << EOF
"=========================================================="
"||   Install the Docker packages....................    ||"
"=========================================================="
EOF

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

echo << EOF
"=========================================================="
"||   Install is completed ....................    ||"
"=========================================================="
EOF

dockerStatus=$(systemctl status docker | awk '/Active/ {print $3}' | tr -d "[()]")
dockerVersion=$(docker -v | awk '/version/ {print $3}' | tr -d ",")

echo "The Docker status is $dockerStatus"
echo "The Docker version is $dockerVersion"

# Step 2:
echo << EOF
"=========================================================="
"||   Virtual box setup  ||"
"=========================================================="
EOF

#!/bin/bash 

sudo apt-get update -y
sudo apt-get install conntrack -y
sudo apt-get install curl apt-transport-https wget -y
sudo apt-get install virtualbox virtualbox-ext-pack -y


# Step 3:
echo << EOF
"=========================================================="
"||  minikube setup install  ||"
"=========================================================="
EOF

#!/bin/bash 

curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube 
sudo chmod 755 /usr/local/bin/minikube 
minikube version

# Step 4:
echo << EOF
"=========================================================="
"||  kubectl setup install  ||"
"=========================================================="
EOF

#!/bin/bash 
echo "Update the apt package index and install packages needed to use the Kubernetes apt repository:"
sudo apt-get update -y
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl


echo -e "Download the public signing key for the Kubernetes package repositories.\nThe same signing key is used for all repositories so you can disregard the version in the URL:"

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg 


# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list


sudo apt-get update -y
sudo apt-get install -y kubectl


# Step 5:
echo << EOF
"=========================================================="
"||  kubectl version details  ||"
"=========================================================="
EOF


kubectl version -o json


# Step 6:
echo << EOF
"=========================================================="
"||  exit from root to ubantu to add group  ||"
"=========================================================="
EOF
exit
sudo usermod -aG docker $USER && newgrp docker

# Step 7:
echo << EOF
"=========================================================="
"|| Minikube will create and manage the cluster using Docker containers  ||"
"=========================================================="
EOF

minikube start --driver=docker

